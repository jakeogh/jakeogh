set -o nounset
set -o errexit
set -o pipefail
trap 'echo "${0}: ERROR at line ${LINENO} Exiting" >&2; exit 1' ERR
export LC_ALL=C

config_file="{CONF_FILE}"
portage_dir="/etc/portage"
make_conf="${portage_dir}/make.conf"
target="${portage_dir}/${config_file}"
detect_flags_cmd="{FLAG_PACKAGE}"

if ! command -v "${detect_flags_cmd}" >/dev/null; then
    echo "${0}: ERROR: ${detect_flags_cmd} is not installed" >&2
    exit 1
fi

[ "$(id -u)" -eq 0 ] || {
    echo "${0}: ERROR: must be run as root" >&2
    exit 1
}

if [ ! -f "${make_conf}" ]; then
    echo "${0}: ERROR: ${make_conf} does not exist" >&2
    exit 1
fi

if [ ! -r "${make_conf}" ]; then
    echo "${0}: ERROR: ${make_conf} exists but is not readable" >&2
    exit 1
fi

if [ -e "${target}" ] && [ ! -r "${target}" ]; then
    echo "${0}: ERROR: ${target} exists but is not readable" >&2
    exit 1
fi

flags="$("${detect_flags_cmd}" | awk -F': ' '{print $2}' | tr -s '[:space:]' ' ' | xargs)"
if [ -z "${flags}" ]; then
    echo "${0}: ERROR: ${detect_flags_cmd} returned no flags" >&2
    exit 1
fi
case "${flags}" in
    (*[!a-z0-9_[:space:]]*)
        echo "${0}: ERROR: Unexpected characters found in {TYPE_OF_FLAGS} flags: '${flags}'" >&2
        exit 1
        ;;
esac

# Handle existing conf file to be sourced
if [ -s "${target}" ]; then
    current_flags=$(sed -n 's/^CPU_FLAGS_X86="\([^"]*\)"$/\1/p' "${target}")
    if [ -z "${current_flags}" ]; then
        echo "${0}: ERROR: Unable to extract CPU_FLAGS_X86 from ${target}" >&2
        exit 1
    fi

    if [ "${current_flags}" != "${flags}" ]; then
        echo "${0}: ERROR: ${target} exists and contains different CPU_FLAGS_X86" >&2
        echo "${0}:        Refusing to overwrite to avoid breaking built binaries" >&2
        echo "${0}:        Please delete ${target} manually if you're sure" >&2
        exit 1
    else
        echo "${0}: INFO: ${target} already exists with matching {TYPE_OF_FLAGS} flags"
        echo "${0}: INFO: Verified ${target} contains expected {TYPE_OF_FLAGS} flags"
    fi
else
    if [ ! -w "${portage_dir}" ]; then
        echo "${0}: ERROR: ${portage_dir} is not writable (needed to write ${target})" >&2
        exit 1
    fi
    if [ ! -w "${make_conf}" ]; then
        echo "${0}: ERROR: ${target} needs to be created, but ${make_conf} is not writable" >&2
        echo "${0}:        This is unexpected — aborting to avoid incomplete setup" >&2
        exit 1
    fi
    temp_target="$(mktemp "${target}.tmp.XXXXXX")" || {
        echo "${0}: ERROR: Failed to create temporary file for ${target}" >&2
        exit 1
    }

    {
        printf '# THIS FILE IS AUTOMATICALLY GENERATED BY %s on %s\n\n' "${0}" "$(date -u +'%Y-%m-%d %H:%M:%S UTC')"
        echo "CPU_FLAGS_X86=\"${flags}\""
    } > "${temp_target}"

    mv -f -- "${temp_target}" "${target}"

    if [ ! -e "${target}" ]; then
        echo "${0}: ERROR: Failed to create ${target}" >&2
        exit 1
    fi
    echo "${0}: INFO: Created ${target} with detected {TYPE_OF_FLAGS} flags"

    if [ ! -r "${target}" ]; then
        echo "${0}: ERROR: ${target} is not readable after creation" >&2
        exit 1
    fi

    if ! grep -Fqx "CPU_FLAGS_X86=\"${flags}\"" "${target}"; then
        echo "${0}: ERROR: Verification failed — ${target} does not contain expected flags" >&2
        exit 1
    fi
    echo "${0}: INFO: Verified ${target} contains expected {TYPE_OF_FLAGS} flags"
fi

# Ensure conf file is sourced from make.conf
source_line="source ${target}"
if ! grep -Fqx "${source_line}" "${make_conf}"; then

    if [ ! -w "${make_conf}" ]; then
        echo "${0}: ERROR: Required line \`${source_line}\` is missing from ${make_conf}, but the file is not writable." >&2
        echo "${0}:        This should never happen — if /etc is read-only, the line must already be present." >&2
        echo "${0}:        Aborting to prevent inconsistent state." >&2
        exit 1
    fi

    backup="${make_conf}.bak.$(date +%s)"
    if ! cp -a -- "${make_conf}" "${backup}"; then
        echo "${0}: ERROR: Failed to back up ${make_conf} to ${backup}" >&2
        exit 1
    fi
    echo "${0}: INFO: Backed up ${make_conf} to ${backup}"

    echo "${0}: INFO: Adding \`${source_line}\` to ${make_conf}"
    echo "${source_line}" >> "${make_conf}" || {
        echo "${0}: ERROR: Failed to append to ${make_conf}" >&2
        exit 1
    }

    if ! grep -Fqx "${source_line}" "${make_conf}"; then
        echo "${0}: ERROR: Failed to verify that ${target} is sourced from ${make_conf}" >&2
        exit 1
    fi
else
    echo "${0}: INFO: ${target} is already sourced in ${make_conf}"
fi

echo "${0}: INFO: Successfully verified ${target} and make.conf sourcing"
echo "${0}: INFO: completed successfully"

