# Copyright 2025 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

EAPI=8

# Datoviz ships a C/C++ core and a thin Python wrapper that expects the built lib next to the package.
PYTHON_COMPAT=( python3_12 python3_13 )

inherit cmake git-r3 python-r1

DESCRIPTION="Datoviz (live git): Vulkan-based visualization core + Python bindings"
HOMEPAGE="https://github.com/datoviz/datoviz"

# live ebuild
EGIT_REPO_URI="https://github.com/datoviz/datoviz.git"
EGIT_BRANCH="main"
# only pull the bits that aren’t system-provided; don’t fetch msdfgen/msdf-atlas-gen
EGIT_SUBMODULES=( data external/imgui )

LICENSE="MIT"
SLOT="0"
KEYWORDS=""
IUSE="test"

RESTRICT="!test? ( test )"

# build deps
BDEPEND="
  dev-build/cmake
  dev-build/ninja
  virtual/pkgconfig
  dev-util/vulkan-headers
"

# runtime / link deps
RDEPEND="
  ${PYTHON_DEPS}
  media-libs/vulkan-loader
  x11-libs/glfw
  media-libs/freetype
  media-libs/libpng
  sys-libs/zlib
  dev-libs/tinyxml2
  media-libs/msdf-atlas-gen
"

DEPEND="
  ${RDEPEND}
"

# CMake 4 removed <3.5 compatibility. We’ll set a minimum policy level at configure time.
# Also, Datoviz’s CMake sometimes expects imported targets to already exist if it
# decides not to FetchContent. We create an include file that defines them.
src_prepare() {
  cmake_src_prepare

  # Provide imported targets *before* the project() call via CMAKE_PROJECT_TOP_LEVEL_INCLUDES.
  # - tinyxml2::tinyxml2       -> points to system libtinyxml2
  # - msdf-atlas-gen::msdf-atlas-gen -> points to system libmsdf-atlas-gen
  # - msdfgen::msdfgen         -> interface target that pulls in msdfgen-core & msdfgen-ext
  # (msdf-atlas-gen installs libmsdfgen-*.so from its submodule; headers are not required here)
  cat > "${T}/gentoo_fetchcontent_overrides.cmake" <<'EOF' || die
# --- Gentoo overrides for Datoviz build ---------------------------------------

# Robust find_library wrapper with status output
macro(_gentoo_findlib _out)
  if(NOT ${_out})
    find_library(${_out} NAMES ${ARGN})
    if(${_out})
      message(STATUS "Gentoo: found ${_out} = ${${_out}}")
    else()
      message(STATUS "Gentoo: NOT found ${_out} (tried: ${ARGN})")
    endif()
  endif()
endmacro()

# 1) tinyxml2::tinyxml2
if(NOT TARGET tinyxml2::tinyxml2)
  _gentoo_findlib(TINYXML2_LIB tinyxml2)
  if(TINYXML2_LIB)
    add_library(tinyxml2::tinyxml2 UNKNOWN IMPORTED)
    set_target_properties(tinyxml2::tinyxml2 PROPERTIES
      IMPORTED_LOCATION "${TINYXML2_LIB}")
  endif()
endif()

# 2) msdf-atlas-gen::msdf-atlas-gen
if(NOT TARGET msdf-atlas-gen::msdf-atlas-gen)
  _gentoo_findlib(MSDF_ATLAS_GEN_LIB msdf-atlas-gen)
  if(MSDF_ATLAS_GEN_LIB)
    add_library(msdf-atlas-gen::msdf-atlas-gen UNKNOWN IMPORTED)
    # Headers are usually under /usr/include/msdf-atlas-gen; just give /usr/include for safety.
    set_target_properties(msdf-atlas-gen::msdf-atlas-gen PROPERTIES
      IMPORTED_LOCATION "${MSDF_ATLAS_GEN_LIB}"
      INTERFACE_INCLUDE_DIRECTORIES "/usr/include")
  endif()
endif()

# 3) msdfgen::msdfgen (interface target)
if(NOT TARGET msdfgen::msdfgen)
  _gentoo_findlib(MSDFGEN_CORE_LIB msdfgen-core)
  _gentoo_findlib(MSDFGEN_EXT_LIB  msdfgen-ext)
  if(MSDFGEN_CORE_LIB AND MSDFGEN_EXT_LIB)
    add_library(msdfgen-core UNKNOWN IMPORTED)
    set_target_properties(msdfgen-core PROPERTIES IMPORTED_LOCATION "${MSDFGEN_CORE_LIB}")
    add_library(msdfgen-ext UNKNOWN IMPORTED)
    set_target_properties(msdfgen-ext  PROPERTIES IMPORTED_LOCATION "${MSDFGEN_EXT_LIB}")

    add_library(msdfgen::msdfgen INTERFACE IMPORTED)
    target_link_libraries(msdfgen::msdfgen INTERFACE msdfgen-core msdfgen-ext)
  endif()
endif()

# Tell any FetchContent users to stay offline; we are using system libs.
set(FETCHCONTENT_FULLY_DISCONNECTED ON CACHE BOOL "" FORCE)
EOF
}

src_configure() {
  local libdir=$(get_libdir)

  local -a mycmakeargs=(
    -DCMAKE_BUILD_TYPE=RelWithDebInfo
    -DBUILD_SHARED_LIBS=ON
    -DBUILD_TESTING=$(usex test ON OFF)

    # ensure config packages can be discovered
    -DCMAKE_PREFIX_PATH="/usr/${libdir}/cmake;/usr/${libdir};/usr"

    # inject our overrides *before* project() runs
    -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES="${T}/gentoo_fetchcontent_overrides.cmake"

    # CMake 4 compatibility shim (see QA note from the logs)
    -DCMAKE_POLICY_VERSION_MINIMUM=3.5

    # keep Datoviz from trying to download anything
    -DFETCHCONTENT_FULLY_DISCONNECTED=ON
  )

  cmake_src_configure
}

src_compile() {
  cmake_src_compile
}

# The upstream Python bits just need the built shared library placed under
# site-packages/datoviz/build/ so that the Python wrapper can dlopen it.
python_install() {
  local built_lib
  # Accept versioned or unversioned SONAME
  built_lib="$(printf '%s\n' \
      "${BUILD_DIR}/libdatoviz.so" \
      "${BUILD_DIR}/libdatoviz.so."* \
    | head -n1)"

  if [[ ! -f ${built_lib} ]]; then
    die "Could not find built libdatoviz.so in ${BUILD_DIR}"
  fi

  insinto "$(python_get_sitedir)/datoviz/build"
  doins "${built_lib}" || die
}

src_install() {
  python_foreach_impl python_install
  einstalldocs
}

pkg_postinst() {
  elog "Datoviz installed."
  elog "Python will load: $(python_get_sitedir)/datoviz/build/libdatoviz.so"
  elog "Using system tinyxml2 and msdf-atlas-gen (which provides msdfgen libs)."
}
