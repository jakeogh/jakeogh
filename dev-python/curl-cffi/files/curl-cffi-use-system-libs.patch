--- a/scripts/build.py
+++ b/scripts/build.py
@@ -1,12 +1,10 @@
 import json
 import os
 import platform
-import shutil
 import struct
-import tempfile
-from glob import glob
 from pathlib import Path
-from urllib.request import urlretrieve
+import sys
+import sysconfig
 
 from cffi import FFI
 
@@ -15,6 +13,25 @@ __version__ = "1.2.2"
 
 
 def detect_arch():
+    # Check for system libcurl-impersonate
+    use_system = os.environ.get('CURL_CFFI_USE_SYSTEM_LIBCURL', '0') == '1'
+
+    if use_system:
+        # Use system-installed libcurl-impersonate
+        libdir = os.environ.get('CURL_CFFI_LIBCURL_DIR', '/usr/lib64')
+        if not os.path.exists(libdir):
+            libdir = '/usr/lib'
+
+        return {
+            'system': platform.system(),
+            'machine': platform.uname().machine,
+            'pointer_size': struct.calcsize("P") * 8,
+            'libdir': libdir,
+            'so_name': 'libcurl-impersonate.so',
+            'so_arch': platform.uname().machine,
+            'link_type': 'dynamic',
+        }
+
     with open(Path(__file__).parent.parent / "libs.json") as f:
         archs = json.loads(f.read())
 
@@ -49,30 +66,14 @@ print(f"Using {arch['libdir']} to store libcurl-impersonate")
 
 
 def download_libcurl():
-    if (Path(arch["libdir"]) / arch["so_name"]).exists():
-        print(".so files already downloaded.")
+    # Skip download when using system libraries
+    use_system = os.environ.get('CURL_CFFI_USE_SYSTEM_LIBCURL', '0') == '1'
+    if use_system:
+        print("Using system libcurl-impersonate")
         return
 
-    file = "libcurl-impersonate.tar.gz"
-    sysname = "linux-" + arch["libc"] if arch["system"] == "Linux" else arch["sysname"]
-
-    url = (
-        f"https://github.com/lexiforest/curl-impersonate/releases/download/"
-        f"v{__version__}/libcurl-impersonate-v{__version__}"
-        f".{arch['so_arch']}-{sysname}.tar.gz"
-    )
-
-    print(f"Downloading libcurl-impersonate from {url}...")
-    urlretrieve(url, file)
-
-    print("Unpacking downloaded files...")
-    os.makedirs(arch["libdir"], exist_ok=True)
-    shutil.unpack_archive(file, arch["libdir"])
-
-    if arch["system"] == "Windows":
-        for file in glob(os.path.join(arch["libdir"], "lib/*.lib")):
-            shutil.move(file, arch["libdir"])
-        for file in glob(os.path.join(arch["libdir"], "bin/*.dll")):
-            shutil.move(file, arch["libdir"])
+    if (Path(arch["libdir"]) / arch["so_name"]).exists():
+        print(".so files already present.")
 
     print("Files after unpacking")
     print(os.listdir(arch["libdir"]))
@@ -81,28 +82,12 @@ def download_libcurl():
 def get_curl_archives():
     print("Files for linking")
     print(os.listdir(arch["libdir"]))
-    if arch["system"] == "Linux" and arch.get("link_type") == "static":
-        # note that the order of libraries matters
-        # https://stackoverflow.com/a/36581865
-        return [
-            f"{arch['libdir']}/libcurl-impersonate.a",
-            f"{arch['libdir']}/libssl.a",
-            f"{arch['libdir']}/libcrypto.a",
-            f"{arch['libdir']}/libz.a",
-            f"{arch['libdir']}/libzstd.a",
-            f"{arch['libdir']}/libnghttp2.a",
-            f"{arch['libdir']}/libngtcp2.a",
-            f"{arch['libdir']}/libngtcp2_crypto_boringssl.a",
-            f"{arch['libdir']}/libnghttp3.a",
-            f"{arch['libdir']}/libbrotlidec.a",
-            f"{arch['libdir']}/libbrotlienc.a",
-            f"{arch['libdir']}/libbrotlicommon.a",
-            f"{arch['libdir']}/libcares.a",
-        ]
-    else:
-        return []
+    # Always use dynamic linking with system libraries
+    return []
 
 
 def get_curl_libraries():
+    # Always use dynamic linking for system libraries
     if arch["system"] == "Windows":
         return [
             "Crypt32",
@@ -120,10 +105,8 @@ def get_curl_libraries():
             "iphlpapi",
             "cares",
         ]
-    elif arch["system"] == "Darwin" or (
-        arch["system"] == "Linux" and arch.get("link_type") == "dynamic"
-    ):
-        return ["curl-impersonate"]
+    elif arch["system"] in ("Darwin", "Linux"):
+        return ["curl-impersonate-chrome"]
     else:
         return []
